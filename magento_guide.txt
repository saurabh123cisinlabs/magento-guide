                  

====================================================================================================================================================================================================================                                                      
                                                               

Link: https://inviqa.com/blog/magento-2-tutorial-how-to-create-command-line-module

http://devdocs.magento.com/guides/v2.0/extension-dev-guide/build/di-xml-file.html



=> What is cache:


Cache is temprory files which saves configuration, layout, blocks, collection Data in the var/cache directory and increase the speed of magento by rendring pages using this stored cache files.

In Magento we have the following cache types:

Configuration (non-layout XML files)
Layouts
Blocks HTML output (Page blocks like headers, footers and callouts)
Translations
Collections Data
EAV types and attributes
Web Services Configuration


=> cache:clean will only clean out those tags which have been flagged as invalid? it deletes the cache storage by tags.

=> cache:flush will wipe out everything in the cache folder.



====================================================================== Magento Foler structure ++++++++++++++++++++++++++++++++++++++

======================================
app

app is one of the main locations within Magento 2. It contains all of our Application Logicso inside of app, you will see:

.htaccess – Ensures that contents are not readable via a web browser.
autoload.php – Handles registering of the autoloaders used by Magento 2.
bootstrap.php – Starts the bootstrap process.
functions.php – Registers global functions that are used throughout the application. Mainly the creation of value objects

code – This folder is where all of our code will be placed.
design – When working on themes, this is the place for you. Not only is your project located here, but you will also find the core Magento themes separated into frontend and admin sections.
etc – If you’re looking for project configuration, you will find it here.

    => The di.xml file configures which dependencies to inject by the object manager.

il8n – Translations are kept here.


Magento loads The configuration in the following stages:

Initial (app/etc/di.xml)
Global (<moduleDir>/etc/di.xml)
Area-specific (<moduleDir>/etc/<area>/di.xml)

======================================
bin

The bin directory is used for any binary files that are executable. The only Magento file in the bin directory is the Magento 2 CLI command that is used to run many maintenance tasks such as cache clearing, installing Magento, or running the indexers. There are many more commands, and this is where we will be looking to add functionality with our module.


======================================
lib

The lib folder is similar to its equivalent in Magento 1. It contains the main framework for Magento as well as some core libraries that are required. you should use this folder to install extra libraries into the system. Instead, I suggest that you should only use this folder if you can’t make a Composer package out of your library.

======================================
pub

The public folder is where your web server should point. Inside this directory are all of the auto-generated frontend assets that are used to render the site. It’s important to ensure the write permissions are set on these folders, otherwise you will run into some issues. But there is no active development done inside this directory. Instead, it’s used by Magento to place all assets that are needed. While in development mode, frontend assets are generated in real time; in fact, during development, you might find yourself running rm-rf pub/static/frontend/Theme.


However, when you go into production having assets generated in real time, you would add too much overhead to page loads, so php bin/magento setup:staticcontent:deploy generates these assets on deployment. While we are talking about this command, it is worth noting that we only need to run this when we are operating in production mode. When in default or development modes, these assets are automatically generated on each request.

=======================================

setup

This folder is only ever needed when you install Magento 2. As with Magento 1, you can customise the install process, but with the ease of using the web installer or the CLI, there is little to do in this folder.

===========================================

var

As with Magento 1, the var folder contains all of the cache assets and auto-generated class files etc. Anything that Magento creates (other than the generated CSS, JS etc.) will be found in this folder. It also contains the log and report directories so, if you have an exception log or debug info you want to see, take a look in this directory. Folders such as page_cache and cache are easy to understand. However, you will see a folder called generation and di. Don’t worry if you do not see the di folder. You will only see this if you have compiled the DI container via the CLI and are working in production mode.

These folders contain the compiled dependency injection container, as well as all of the generated factories that Magento needs to function. Again, during developer mode, these assets are generated in real-time, yet, when you move to production, there are more commands to run. 


================================================
Vendor

this folder is generated by Composer and contains all of the dependencies that are defined within the composer.json file.


































































































































































































































































































































