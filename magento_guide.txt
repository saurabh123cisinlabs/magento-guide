                  
====================================================================== Magento Foler structure ++++++++++++++++++++++++++++++++++++++
Magento1 default number of table : 334
Magento2 default number of tables: 308 
======================================
app

app is one of the main locations within Magento 2. It contains all of our Application Logicso inside of app, you will see:

.htaccess – Ensures that contents are not readable via a web browser.
autoload.php – Handles registering of the autoloaders used by Magento 2.
bootstrap.php – Starts the bootstrap process.
functions.php – Registers global functions that are used throughout the application. Mainly the creation of value objects

code – This folder is where all of our code will be placed.
design – When working on themes, this is the place for you. Not only is your project located here, but you will also find the core Magento themes separated into frontend and admin sections.
etc – If you’re looking for project configuration, you will find it here.

    => The di.xml file configures which dependencies to inject by the object manager.

il8n – Translations are kept here.


Magento loads The configuration in the following stages:

Initial (app/etc/di.xml)
Global (<moduleDir>/etc/di.xml)
Area-specific (<moduleDir>/etc/<area>/di.xml)

======================================
bin

The bin directory is used for any binary files that are executable. The only Magento file in the bin directory is the Magento 2 CLI command that is used to run many maintenance tasks such as cache clearing, installing Magento, or running the indexers. There are many more commands, and this is where we will be looking to add functionality with our module.


======================================
lib

The lib folder is similar to its equivalent in Magento 1. It contains the main framework for Magento as well as some core libraries that are required. you should use this folder to install extra libraries into the system. Instead, I suggest that you should only use this folder if you can’t make a Composer package out of your library.

======================================
pub

The public folder is where your web server should point. Inside this directory are all of the auto-generated frontend assets that are used to render the site. It’s important to ensure the write permissions are set on these folders, otherwise you will run into some issues. But there is no active development done inside this directory. Instead, it’s used by Magento to place all assets that are needed. While in development mode, frontend assets are generated in real time; in fact, during development, you might find yourself running rm-rf pub/static/frontend/Theme.


However, when you go into production having assets generated in real time, you would add too much overhead to page loads, so php bin/magento setup:staticcontent:deploy generates these assets on deployment. While we are talking about this command, it is worth noting that we only need to run this when we are operating in production mode. When in default or development modes, these assets are automatically generated on each request.

=======================================

setup

This folder is only ever needed when you install Magento 2. As with Magento 1, you can customise the install process, but with the ease of using the web installer or the CLI, there is little to do in this folder.

===========================================

var

As with Magento 1, the var folder contains all of the cache assets and auto-generated class files etc. Anything that Magento creates (other than the generated CSS, JS etc.) will be found in this folder. It also contains the log and report directories so, if you have an exception log or debug info you want to see, take a look in this directory. Folders such as page_cache and cache are easy to understand. However, you will see a folder called generation and di. Don’t worry if you do not see the di folder. You will only see this if you have compiled the DI container via the CLI and are working in production mode.

These folders contain the compiled dependency injection container, as well as all of the generated factories that Magento needs to function. Again, during developer mode, these assets are generated in real-time, yet, when you move to production, there are more commands to run. 


================================================
Vendor

this folder is generated by Composer and contains all of the dependencies that are defined within the composer.json file.

====================================================================================================================================================================================================================                                                      
                                                               

Link: https://inviqa.com/blog/magento-2-tutorial-how-to-create-command-line-module

http://devdocs.magento.com/guides/v2.0/extension-dev-guide/build/di-xml-file.html



=> What is cache:


Cache is temprory files and snapshots of the pregenerated files which saves configuration, layout, blocks, collection Data of pregenerated files in the var/cache directory and increase the speed of magento by rendring pages using this stored cache files.

In Magento we have the following cache types:

Configuration (non-layout XML files)
Layouts
Blocks HTML output (Page blocks like headers, footers and callouts)
Translations
Collections Data
EAV types and attributes
Web Services Configuration


=> cache:clean will only clean out those tags which have been flagged as invalid? it deletes the cache storage by tags.

=> cache:flush will wipe out everything in the cache folder.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++  Module configuration ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++



<module name=“PockerGuide_Generators” setup_version=”0.0.1”/>

While we are looking at version numbers, I would like to introduce you to Semantic Versioning (Semver). We often see version numbers as just numbers, but they are lots more. A version number can indicate its stability and a module’s upgrade path.

    Major – A feature complete new release. Can introduce breaking changes between major releases 16
    Minor – Non-breaking changes and small incremental updates in functionality
    Patch – Bug fixing

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

API

The API folder is a new addition to Magento 2. Magento 2 now supports and encourages developers to create interfaces. Interfaces or Service Contracts in Magento 2 language are used to define the public API of a class. 

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Block

Just as the name suggests, here are the block classes that will be our layer between the back-end and the frontend. This folder is used again for both front-end blocks and adminhtml blocks.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Controller

Controllers are where we convert a request into a response. They work a little differently to how they are used in in Magento 1, and this is an area we will explore lots more when we get around to implementing frontend and admin routes.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

etc

We have already had a quick look at this folder. However, there is much more to it than just module.xml. We can configure our dependency injection, adminhtml configuration, and frontend configuration, as well as lots, lots more.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Helper

Just like in Magento 1, this is the folder where we place all of our general purpose helpers than can be called from any location.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

il8n

Module-specific translations should be placed in this folder. That way, on a per-installation basis, they can be modified globally.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Model

Models have changed considerably in Magento 2, but that is for another guide. For now, all we need to know is that models are used for data modelling.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Test

All good modules need tests and they should be in the module’s folder so they can be run against any build. This folder includes the unit integration and, where possible, functional tests. Magento 2 comes with lots of tests that can be used for reference and, with the use of Dependency Injection, it makes using testing frameworks more attainable.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Setup

The install and upgrade process in Magento 2 is different than Magento 1. For now just know that if you want to run scripts to install or upgrade both data and schemas, they are placed in here

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

View

This folder is new for Magento 2. In Magento 1 we were used to adding our view files or template in the base or theme directory. However, in Magento 2 we place our templates, JS and CSS (LESS) with the module, so there is no longer a complex process of distributing modules. However, theme-specific changes are still added within the app/design folder. This is only used for setting some default templates/ styles when distributing our modules.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Composer.json

Not all modules will require a composer.json file. If you never plan on using this module on any other project, it is fine to omit it.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Adding Composer to the Module:

We know that we want to use a Filesystem library within our module, and we also want to use PhpSpec while writing it, so let’s create a composer.json file in the root of our module. 

{
 “name”: “packageName/moduleName”,
 “description”: “Generate new classes for M2”,
 “license”: “MIT”,
 “type”: “magento2-module”,
}


Require:

So we know that we can use Composer to install packages that will make development easier (“easier” in the sense that we are not rewriting everything from scratch; we can use community packages in our work). Now let’s pull in a symfony package for filesystem, as well as a yaml configuration, just in case we want to add some configuration options.

“require”: {
 “php”: “>=5.4.0”,
 “symfony/yaml”: “2.*”,
 “symfony/filesystem”: “~2”,
 “composer/composer”: “1.0.0-alpha10”
},


Require dev:

We also want to include some packages while developing our module, but we don’t want these dependencies to ever make it to production. For this, Composer has the helpful section of require-dev.When installing on the production environment, we can use the –no-dev switch to exclude these packages from reaching production.

“require-dev”: {
 “phpspec/phpspec”: “~2.0”,
 “phpunit/phpunit”: “~3.7”,
 “magento/magento2ce”: “1.0.0-beta”
},
“repositories”: [
 {
 “type”: “git”,
 “url”: “https://github.com/magento/magento2”
 }
]

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

What is EAV in Magento?
EAV, stands for Entity Attribute Value, is a technique which allows you to add unlimited columns to your table virtually. EAV also known as object attribute value model and open schema.

+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++

Encriptions Key: https://www.templatemonster.com/help/magento-what-is-magento-encryption-key.html

1) The Magento Encryption Key is generated during the Magento Installation. It is used for the encryption and the security storage of the sensitive data in the script’s database:

2) The Magento Encryption Key is kept in the app/etc/local.xml file. You can open it through File Manager tool in your cPanel or FTP, for example. In this file, you can look for the following code:

3) The ENCRYPTION_KEY string is replaced by the actual encryption key.

4) Note that when you upgrade the site to a new Magento installation, you will be able to log in with the usernames and passwords that you used, even if the encryption key is different.

5) However, if you forgot to remember and resave encryption key from the old installation, you will encounter a problem where some payment or shipping gateways will not work. Access data will not work although you have them in the database. This is where Encryption Key is important. For example, PayPal, Authorize.net and similar transaction keys and passwords are additionally secured with this key via hash & salt method. Basically, without the transaction key, you will have to re-save those access data from Magento administration interface.

6) You should always keep your Magento encryption key securely saved somewhere. You will need it in case you want to move your data to a different Magento instalation. In addition, some payment and shipment processors require it to operate correctly.

++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++=


ORM: https://blog.magestore.com/magento-orm/

1. What is ORM
Object Relational Mapping (ORM) is a programming technique for converting between types of data and objects in OOP. There are 2 types of ORM:
Convert different types of data to objects
Convert objects to various types of data

2. ORM in Magento
In Magento, ORM is shown as Models (in Magento design pattern MVC). Most of the models are inherited from the Varien_Object class, along with using PHP magic _get and _set functions to set and retrieve the data of the object:

$product = Mage::getModel(‘catalog/product’)->setPrice(100);
echo $product->getPrice();

=====================================================================================================

Template/Theme fallback: https://www.classyllama.com/blog/depth-look-magento-theme-fallback

Current Fallback Structure
Magento Enterprise 1.14 and Community 1.9 introduced a new, more flexible theme fallback mechanism. Each theme can now specify its parent, which can then specify its parent, and so on. This theoretically allows infinite fall back levels instead of the fixed number of fall back “slots” in older versions.

=================================================================================================


EAV: http://inchoo.net/magento/magentos-database-layout-and-its-eav-structure/



















































































































































































































































































































































